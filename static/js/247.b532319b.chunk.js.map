{"version":3,"file":"static/js/247.b532319b.chunk.js","mappings":"mMAEAA,EAAAA,EAAMC,SAASC,QAAU,+BACzB,MAAMC,EAAU,mCAEHC,EAAsBC,UACjC,IAME,aALuBL,EAAAA,EAAMM,IAAI,sBAAuB,CACtDC,OAAQ,CACNC,QAASL,MAGGM,KAAKC,OACvB,CAAE,MAAOC,GACP,MAAMA,CACR,GAGWC,EAAeP,UAC1B,IAOE,aANuBL,EAAAA,EAAMM,IAAI,gBAAiB,CAChDC,OAAQ,CACNC,QAASL,EACTU,MAAOA,MAGKJ,KAAKC,OACvB,CAAE,MAAOC,GACP,MAAMA,CACR,GAGWG,EAAoBT,UAC/B,IAME,aALuBL,EAAAA,EAAMM,IAAI,UAADS,OAAWC,GAAW,CACpDT,OAAQ,CACNC,QAASL,MAGGM,IAClB,CAAE,MAAOE,GACP,MAAMA,CACR,GAGWM,EAAoBZ,UAC/B,IAME,aALuBL,EAAAA,EAAMM,IAAI,UAADS,OAAWC,EAAO,YAAY,CAC5DT,OAAQ,CACNC,QAASL,MAGGM,KAAKC,OACvB,CAAE,MAAOC,GACP,MAAMA,CACR,GAGWO,EAAoBb,UAC/B,IAME,aALuBL,EAAAA,EAAMM,IAAI,UAADS,OAAWC,EAAO,YAAY,CAC5DT,OAAQ,CACNC,QAASL,MAGGM,KAAKU,IACvB,CAAE,MAAOR,GACP,MAAMA,CACR,E,sFChEF,MAkEA,EAlEaS,KACX,MAAM,QAAEJ,IAAYK,EAAAA,EAAAA,OACbF,EAAMG,IAAWC,EAAAA,EAAAA,UAAS,IAejC,OAbAC,EAAAA,EAAAA,YAAU,KACUnB,WAChB,IACE,MAAMoB,QAAkBP,EAAAA,EAAAA,IAAkBF,GAC1CM,EAAQG,EACV,CAAE,MAAOd,GACPe,QAAQf,MAAM,gCAAiCA,EACjD,GAGFgB,EAAW,GACV,CAACX,KAGFY,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAAA,MACEG,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,IAAK,OACLC,UAAW,OACXC,QAAS,WACTC,OAAQ,GACRP,SAEDX,EAAKmB,KAAKC,IACTC,EAAAA,EAAAA,MAAA,MAEET,MAAO,CACLU,MAAO,QACPC,OAAQ,iBACRN,QAAS,OACTO,aAAc,OACdb,SAAA,CAEDS,EAAMK,eACLhB,EAAAA,EAAAA,KAAA,OACEiB,IAAG,mCAAA9B,OAAqCwB,EAAMK,cAC9CE,IAAKP,EAAMQ,KACXN,MAAO,IACPV,MAAO,CAAEY,aAAc,UAG3Bf,EAAAA,EAAAA,KAAA,KACEG,MAAO,CACLiB,SAAU,OACVC,WAAY,OACZZ,OAAQ,SACRP,SAEDS,EAAMQ,QAETP,EAAAA,EAAAA,MAAA,KAAAV,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eAAmB,IAAES,EAAMW,eA1BhCX,EAAMY,SA+BhB,C","sources":["api.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8e21f34d58b1a578e492fe7e575bb39e';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get('/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCredits } from \"api\";\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const movieCast = await fetchMovieCredits(movieId);\n        setCast(movieCast);\n      } catch (error) {\n        console.error(\"Error fetching movie credits:\", error);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <>\n      <ul\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          gap: \"12px\",\n          listStyle: \"none\",\n          padding: \"16px 0 0\",\n          margin: 0,\n        }}\n      >\n        {cast.map((actor) => (\n          <li\n            key={actor.id}\n            style={{\n              width: \"150px\",\n              border: \"1px solid #ddd\",\n              padding: \"12px\",\n              borderRadius: \"8px\",\n            }}\n          >\n            {actor.profile_path && (\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\n                alt={actor.name}\n                width={150}\n                style={{ borderRadius: \"4px\" }}\n              />\n            )}\n            <p\n              style={{\n                fontSize: \"16px\",\n                fontWeight: \"bold\",\n                margin: \"8px 0\",\n              }}\n            >\n              {actor.name}\n            </p>\n            <p>\n              <strong>Character:</strong> {actor.character}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","defaults","baseURL","API_KEY","fetchTrendingMovies","async","get","params","api_key","data","results","error","searchMovies","query","fetchMovieDetails","concat","movieId","fetchMovieReviews","fetchMovieCredits","cast","Cast","useParams","setCast","useState","useEffect","movieCast","console","fetchData","_jsx","_Fragment","children","style","display","flexWrap","gap","listStyle","padding","margin","map","actor","_jsxs","width","border","borderRadius","profile_path","src","alt","name","fontSize","fontWeight","character","id"],"sourceRoot":""}