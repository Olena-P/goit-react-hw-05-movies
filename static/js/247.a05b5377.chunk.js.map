{"version":3,"file":"static/js/247.a05b5377.chunk.js","mappings":"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","sources":["api.js","components/Cast/Cast.jsx","pages/NotFound/NotFound.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8e21f34d58b1a578e492fe7e575bb39e';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get('/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCredits } from \"api\";\nimport { RotatingLines } from \"react-loader-spinner\";\nimport NotFound from \"pages/NotFound/NotFound\";\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const movieCast = await fetchMovieCredits(movieId);\n        setCast(movieCast);\n      } catch (error) {\n        console.error(\"Error fetching movie credits:\", error);\n        setError(\"Something went wrong while fetching movie credits.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  const defaultImg =\n    \"https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700\";\n\n  return (\n    <>\n      {isLoading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n      {error && <NotFound />}\n      <ul\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          gap: \"12px\",\n          listStyle: \"none\",\n          padding: \"16px 0 0\",\n          margin: 0,\n        }}\n      >\n        {cast.map((actor) => (\n          <li\n            key={actor.id}\n            style={{\n              width: \"150px\",\n              border: \"1px solid #ddd\",\n              padding: \"12px\",\n              borderRadius: \"8px\",\n            }}\n          >\n            {actor.profile_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\n                alt={actor.name}\n                width={150}\n                style={{ borderRadius: \"4px\" }}\n              />\n            ) : (\n              <img src={defaultImg} alt={actor.name} width={150} />\n            )}\n            <p\n              style={{\n                fontSize: \"16px\",\n                fontWeight: \"bold\",\n                margin: \"8px 0\",\n              }}\n            >\n              {actor.name}\n            </p>\n            <p>\n              <strong>Character:</strong> {actor.character}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n","import React from \"react\";\n\nconst NotFound = () => {\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\",\n          backgroundColor: \"#f0f0f0\",\n        }}\n      >\n        <h1\n          style={{\n            fontSize: \"36px\",\n            color: \"#333\",\n            textAlign: \"center\",\n            padding: \"20px\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"8px\",\n            backgroundColor: \"#fff\",\n            boxShadow: \"0 0 10px rgba(0, 0, 0, 0.1)\",\n          }}\n        >\n          Page Not Found\n        </h1>\n      </div>\n    </>\n  );\n};\n\nexport default NotFound;\n"],"names":["axios","defaults","baseURL","API_KEY","fetchTrendingMovies","async","get","params","api_key","data","results","error","searchMovies","query","fetchMovieDetails","concat","movieId","fetchMovieReviews","fetchMovieCredits","cast","Cast","useParams","setCast","useState","isLoading","setIsLoading","setError","useEffect","movieCast","console","fetchData","_jsxs","_Fragment","children","_jsx","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","NotFound","style","display","flexWrap","gap","listStyle","padding","margin","map","actor","border","borderRadius","profile_path","src","alt","name","fontSize","fontWeight","character","id","justifyContent","alignItems","height","backgroundColor","color","textAlign","boxShadow"],"sourceRoot":""}